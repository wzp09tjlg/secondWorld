import java.text.SimpleDateFormat

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'

android {
    compileSdkVersion HsCompileSdkVersion
    buildToolsVersion HsBuildToolsVersion
    defaultConfig {
        applicationId "com.example.wuzp.secondworld"
        minSdkVersion HsMinSdkVersion
        targetSdkVersion HsTargetSdkVersion
        versionCode 1
        versionName "1.0"
        multiDexEnabled true
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        buildConfigField "boolean", "AUTO_UPDATES", "true"
        buildConfigField "String","BASE_URL","\"http://www.test.com/\""
        buildConfigField "int","DATE","20160701"

        //ge个推配置应用的基本参数
        manifestPlaceholders = [
                GETUI_APP_ID    : "z0hMfRNLqE6UlkIpvofdI9",
                GETUI_APP_KEY   : "fud1nke6yG9MtTJAFkOKCA",
                GETUI_APP_SECRET: "Wz2CYfKwQsAuf3Idwilga8"]

      //个推 os库只选择支持arm平台 x86 及其他平台可以忽略
        ndk {
            abiFilters "armeabi"
        }
    }
    signingConfigs {
        //0ead6353aea4a9a2c4f5876823936547  应用的签名
        release {
            storeFile file('deploy/keystore.jks')
            storePassword RELEASE_STORE_PASSWORD
            keyAlias RELEASE_KEY_ALIAS
            keyPassword RELEASE_KEY_PASSWORD
            v2SigningEnabled false
        }
        debug {
            storeFile file('deploy/keystore.jks')
            storePassword RELEASE_STORE_PASSWORD
            keyAlias RELEASE_KEY_ALIAS
            keyPassword RELEASE_KEY_PASSWORD
        }
    }
    buildTypes {
        //build 的类型 release 和 debug
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
            applicationVariants.all { variant ->
                appendVersionName(variant, defaultConfig)
            }
            //在打包的时候 只打 armeabi-v7a平台的 arm 是比较老的 arm64-v8a 是比较新的
            ndk {
                abiFilters "armeabi-v7a"
            }
        }

        //debug的时候可以向buildConfig中写入自己定义的数据
        debug{
            signingConfig signingConfigs.debug
        }
    }

    /** 看来还是得多学习gradle的脚本语法啊，很明显的错误 都不知道 */
    applicationVariants.all { variant ->
        variant.outputs.each { output ->
            def file = output.outputFile
            output.outputFile = new File(file.parent,
                    "app-" + defaultConfig.versionName + "-" + "Huasheng" + "-" + buildTime() + ".apk")
            //生成的文件名：myapp+版本名+生成日期+.apk
        }
    }

    //打开DataBinding的开关
    dataBinding {
        enabled true
    }

    lintOptions {
        // true--关闭lint报告的分析进度
        quiet true
        // true--错误发生后停止gradle构建
        abortOnError false
        // true--只报告error
        ignoreWarnings true
        // true--忽略有错误的文件的全/绝对路径(默认是true)
        //absolutePaths true
        // true--检查所有问题点，包含其他默认关闭项
        checkAllWarnings true
        // true--所有warning当做error
        warningsAsErrors true
        // 关闭指定问题检查
        disable 'TypographyFractions','TypographyQuotes'
        // 打开指定问题检查
        enable 'RtlHardcoded','RtlCompat', 'RtlEnabled'
        // 仅检查指定问题
        check 'NewApi', 'InlinedApi'
        // true--error输出文件不包含源码行号
        noLines true
        // true--显示错误的所有发生位置，不截取
        showAll true
        // 回退lint设置(默认规则)
        lintConfig file("default-lint.xml")
        // true--生成txt格式报告(默认false)
        textReport true
        // 重定向输出；可以是文件或'stdout'
        textOutput 'stdout'
        // true--生成XML格式报告
        xmlReport false
        // 指定xml报告文档(默认lint-results.xml)
        xmlOutput file("lint-report.xml")
        // true--生成HTML报告(带问题解释，源码位置，等)
        htmlReport true
        // html报告可选路径(构建器默认是lint-results.html )
        htmlOutput file("lint-report.html")
        //  true--所有正式版构建执行规则生成崩溃的lint检查，如果有崩溃问题将停止构建
        checkReleaseBuilds true
        // 在发布版本编译时检查(即使不包含lint目标)，指定问题的规则生成崩溃
        fatal 'NewApi', 'InlineApi'
        // 指定问题的规则生成错误
        error 'Wakelock', 'TextViewEdits'
        // 指定问题的规则生成警告
        warning 'ResourceAsColor'
        // 忽略指定问题的规则(同关闭检查)
        ignore 'TypographyQuotes'
    }

    // 也不知道这货是干嘛的
    testOptions {
        unitTests {
            returnDefaultValues = true
        }
    }

    //通过友盟的多渠道打包步骤：
    //1.添加友盟的统计的jar包
    //2.在清单文件中  添加holder
    //<meta-data
    //          android:name="UMENG_CHANNEL"
    //          android:value="CHANNEL_NAME" />
    //3.使用gradle 替换清单文件中的 CHANNEL_NAME
    //   gradle 中存在指令 将自动那个执行  productFlavors中的配置，替换CHANNEL_NAME 为相应的渠道
    //4.在打包之后 将apk的名字修改成可识别的名字 在buildTypes中 执行定义的函数，
    // 将打完包之后的apk修改成带渠道号的名字 （当然也是需要定义这个函数的appendVersionName）
    //applicationVariants.all { variant ->
    //   appendVersionName(variant, defaultConfig)
    //   }

            productFlavors {
//        samsung{ // 三星
//            manifestPlaceholders = [CHANNEL_NAME: "samsung"]
//        }
//        baidu {//百度助手
//            manifestPlaceholders = [CHANNEL_NAME: "baidu"]
//        }
//        anzhuomarket {//安卓市场
//            manifestPlaceholders = [CHANNEL_NAME: "anzhuomarket"]
//        }
//        jiuyao {//91
//            manifestPlaceholders = [CHANNEL_NAME: "jiuyao"]
//        }
//        a360 {//360手机助手
//            manifestPlaceholders = [CHANNEL_NAME: "360"]
//        }
//        anzhi {//安智
//            manifestPlaceholders = [CHANNEL_NAME: "anzhi"]
//        }
//        xiaomi {//小米
//            manifestPlaceholders = [CHANNEL_NAME: "xiaomi"]
//        }
//        wandoujia {//豌豆荚
//            manifestPlaceholders = [CHANNEL_NAME: "wandoujia"]
//        }
//        oppo {//oppo
//            manifestPlaceholders = [CHANNEL_NAME: "oppo"]
//        }
//        yingyongbao {//yingyongbao
//            manifestPlaceholders = [CHANNEL_NAME: "yingyongbao"]
//        }
//        meizu {//meizu
//            manifestPlaceholders = [CHANNEL_NAME: "meizu"]
//        }
//        huawei {//huawei
//            manifestPlaceholders = [CHANNEL_NAME: "huawei"]
//        }
//        vivo {//vivo
//            manifestPlaceholders = [CHANNEL_NAME: "vivo"]
//        }
//        sogou {//搜狗手机
//            manifestPlaceholders = [CHANNEL_NAME: "sogou"]
//        }
        LeTV {//乐视
            manifestPlaceholders = [CHANNEL_NAME: "LeTV"]
        }
//        ChinaUnicom {//中国联通
//            manifestPlaceholders = [CHANNEL_NAME: "ChinaUnicom"]
//        }
//        PP {//PP助手
//            manifestPlaceholders = [CHANNEL_NAME: "PP"]
//        }
//        Lenovo {// 联想
//            manifestPlaceholders = [CHANNEL_NAME: "Lenovo"]
//        }
//        HuaSheng {// 花生官网
//            manifestPlaceholders = [CHANNEL_NAME: "HuaSheng"]
//            buildConfigField "boolean", "AUTO_UPDATES", "false"
//        }
          a360_p{//添加一个渠道 用于查看忽略文件中的效果
              manifestPlaceholders = [CHANNEL_NAME: "401"]
          }
          yingyongbao_p{//添加一个渠道 用于查看忽略文件中的效果
              manifestPlaceholders = [CHANNEL_NAME: "401"]
          }
    }
}

dependencies {
    //所有在lib中添加的jar 使用下边的这个命令 都会加入到打包中，所以不需要单独针对lib中的jar加入
    compile fileTree(include: ['*.jar'], dir: 'libs')
    //RecyclerView
    compile recyclerview
    // constraint // 约束布局
    compile constraint
    // Network Framework
    compile retrofit
    compile converter_gson
    compile retrofit2_rxjava2_adapter
    compile okhttp_logging_interceptor
    compile okhttp
    // Image Loader Framework
    compile glide
    compile glide_okhttp3
    // Reactive Programming Codeing Framework
    compile rxandroid
    compile rxjava
    // Google Support Lib
    compile rootProject.ext.support_dependencies["v7"]
    compile rootProject.ext.support_dependencies["v4"]
    compile rootProject.ext.support_dependencies["design"]
    compile rootProject.ext.support_dependencies["appcompat_v7"]
    compile rootProject.ext.support_dependencies["multidex"]

    // Test Framework
    testCompile junit
    debugCompile logutils_debug
    releaseCompile logutils_release
    testCompile logutils_debug
    debugCompile leakcanary_debug
    releaseCompile leakcanary_release
    testCompile leakcanary_test
    //kotlin
    compile kotlin7
    //test frameWork
    //不知道这个是干嘛用的  删掉之后在AndroidTest就报错(引用报错) 加上之后就好了
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    testCompile 'junit:junit:4.12'
    testCompile junit
    debugCompile logutils_debug
    releaseCompile logutils_release
    testCompile logutils_debug
    debugCompile leakcanary_debug
    releaseCompile leakcanary_release
    testCompile leakcanary_test
    //将添加到libs中的jar 添加到项目中, 不过更加便捷的方式是 在一个modual中
    compile open_sdk
    compile fastjson_sdk
    // 将modual添加进来 才能真正的使用
    // local sdk
    compile h_sdk
    compile s_sdk
    // u_meng 统计相关的东西
    compile u_meng
    // netty 新的一种网络连接
    compile netty
    // 支持gif的一种三方库
    compile gif
    // 支持个推
//    compile gt
//    compile gt_jar
//    compile gt_json

    //添加侧滑的三方库
    compile 'com.r0adkll:slidableactivity:2.0.5'
}
repositories {
    mavenCentral()
}

def appendVersionName(variant, defaultConfig) {
    variant.outputs.each { output ->
        if (output.zipAlign) {
            def file = output.outputFile
            def fileName = file.name.replace("-release.apk", "-" + defaultConfig.versionName + "-release.apk")
            output.outputFile = new File(file.parent, fileName)
        }
        def file = output.packageApplication.outputFile
        def fileName = file.name.replace("-release.apk", "-" + defaultConfig.versionName + "-release.apk")
        output.packageApplication.outputFile = new File(file.parent, fileName)
    }
}

def buildTime() {
    def df = new SimpleDateFormat("yyyyMMdd")
    df.setTimeZone(TimeZone.getDefault())
    return df.format(new Date())
}